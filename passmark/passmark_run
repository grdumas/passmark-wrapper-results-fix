#!/bin/bash
#
#                         License
#
# Copyright (C) 2021  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# This script automates the execution of coremark.  It will determine the
# set of default run parameters based on the system configuration.
#
test_name="passmark"
arguments="$@"
chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
run_dir=`echo $0 | cut -d'/' -f 1-${chars}`

show_usage=0

#
# Clone the repo that contains the common code and tools
#
tools_git=https://github.com/dvalinrh/test_tools

found=0
for arg in "$@"; do
	if [ $found -eq 1 ]; then
		tools_git=$arg
		found=0
	fi
	if [[ $arg == "--tools_git" ]]; then
		found=1
	fi

	#
	# We do the usage check here, as we do not want to be calling
	# the common parsers then checking for usage here.  Doing so will
	# result in the script exiting with out giving the test options.
	#
	if [[ $arg == "--usage" ]]; then
		show_usage=1
	fi
done

#
# Check to see if the test tools directory exists.  If it does, we do not need to
# clone the repo.
#
if [ ! -d "test_tools" ]; then
        git clone $tools_git
        if [ $? -ne 0 ]; then
                echo pulling git $tools_git failed.
                exit
        fi
fi

if [ $show_usage -eq 1 ]; then
	echo "$1 Usage:"
	echo "  --cpu_add n: add n cpus each iteration until hit max cpus"
	echo "  --powers_2: starting from 1 cpu, keep doubling the cpus until max cpus"
	source test_tools/general_setup --usage
	exit 0
fi

#
# Variables set by general setup.
#
# TOOLS_BIN: points to the tool directory
# to_home_root: home directory
# to_configuration: configuration information
# to_times_to_run: number of times to run the test
# to_pbench: Run the test via pbench
# to_pbench_copy: Copy the data to the pbench repository, not move_it.
# to_puser: User running pbench
# to_run_label: Label for the run
# to_user: User on the test system running the test
# to_sys_type: for results info, basically aws, azure or local
# to_sysname: name of the system
# to_tuned_setting: tuned setting
#

source test_tools/general_setup "$@"

ARGUMENT_LIST=(
        "cpu_add"
)

NO_ARGUMENTS=(
	"powers_2"
        "usage"
)

# read arguments
opts=$(getopt \
	--longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
	--longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
	--name "$(basename "$0")" \
	--options "h" \
	-- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		--usage)
			usage $0
		;;
		-h)
			usage $0
		;;
		--)
			break
		;;
		*)
			echo option not found $1
			usage $0
		;;
	esac
done

cd /${to_home_root}/${to_user}
if [ ! -d "PerformanceTest" ]; then
	unzip pt_linux_*.zip
fi

if [ ! -f "/usr/lib64/libncurses.so.5" ]; then
	pushd /usr/lib64 > /dev/null
	ln -s libncurses.so.6 libncurses.so.5
	popd > /dev/null
fi

pushd PerformanceTest > /dev/null

#
# Iteration of test.
#

if [ $to_pbench -eq 0 ]; then
	for iter in $(seq 1 1 $to_times_to_run); do
		./pt_linux_x64 -r 3 >> ${test_name}_${iter}.out
		mv results_all.yml results_all_${iter}.yml
	done
	rm -rf /tmp/results_${test_name}_*
	RESULTSDIR=/tmp/results_${test_name}_${to_tuned_setting}_$(date "+%Y.%m.%d-%H.%M.%S")
	mkdir $RESULTSDIR
	cp results_all_* $RESULTSDIR
	mv  ${test_name}_${iter}.out ${RESULTSDIR}
	pushd /tmp > /dev/null
	ln -s ${RESULTSDIR} results_${test_name}_${to_tuned_setting}
	tar hcf results_${test_name}_${to_tuned_setting}.tar results_${test_name}_${to_tuned_setting}
	cp  results_${test_name}_${to_tuned_setting}.tar results_pbench_${test_name}_${to_tuned_setting}.tar
	popd > /dev/null
else
	source ~/.bashrc
	echo $TOOLS_BIN/execute_pbench --cmd_executing "$0" $arguments --test ${test_name} --spacing 11
	echo $TOOLS_BIN/execute_pbench --cmd_executing "$0" $arguments --test ${test_name} --spacing 11 > /tmp/foo
	$TOOLS_BIN/execute_pbench --cmd_executing "$0" $arguments --test ${test_name} --spacing 11
fi
